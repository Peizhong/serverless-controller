/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/peizhong/serverless-controller/pkg/apis/serverlesscontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServerlessFuncLister helps list ServerlessFuncs.
// All objects returned here must be treated as read-only.
type ServerlessFuncLister interface {
	// List lists all ServerlessFuncs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServerlessFunc, err error)
	// ServerlessFuncs returns an object that can list and get ServerlessFuncs.
	ServerlessFuncs(namespace string) ServerlessFuncNamespaceLister
	ServerlessFuncListerExpansion
}

// serverlessFuncLister implements the ServerlessFuncLister interface.
type serverlessFuncLister struct {
	indexer cache.Indexer
}

// NewServerlessFuncLister returns a new ServerlessFuncLister.
func NewServerlessFuncLister(indexer cache.Indexer) ServerlessFuncLister {
	return &serverlessFuncLister{indexer: indexer}
}

// List lists all ServerlessFuncs in the indexer.
func (s *serverlessFuncLister) List(selector labels.Selector) (ret []*v1alpha1.ServerlessFunc, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServerlessFunc))
	})
	return ret, err
}

// ServerlessFuncs returns an object that can list and get ServerlessFuncs.
func (s *serverlessFuncLister) ServerlessFuncs(namespace string) ServerlessFuncNamespaceLister {
	return serverlessFuncNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServerlessFuncNamespaceLister helps list and get ServerlessFuncs.
// All objects returned here must be treated as read-only.
type ServerlessFuncNamespaceLister interface {
	// List lists all ServerlessFuncs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServerlessFunc, err error)
	// Get retrieves the ServerlessFunc from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServerlessFunc, error)
	ServerlessFuncNamespaceListerExpansion
}

// serverlessFuncNamespaceLister implements the ServerlessFuncNamespaceLister
// interface.
type serverlessFuncNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServerlessFuncs in the indexer for a given namespace.
func (s serverlessFuncNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServerlessFunc, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServerlessFunc))
	})
	return ret, err
}

// Get retrieves the ServerlessFunc from the indexer for a given namespace and name.
func (s serverlessFuncNamespaceLister) Get(name string) (*v1alpha1.ServerlessFunc, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("serverlessfunc"), name)
	}
	return obj.(*v1alpha1.ServerlessFunc), nil
}
